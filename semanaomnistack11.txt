aula 01 - conhecendo a OmniStack

notion.so

escolha uma stack
para web precisa de JavaScript

entender oq o mercado ta procurando
ecossitema
caso de uso
vagas no mercado
se estão alinhadas com seu objetivo

primeiro dia

- apresentar a aplicação
- configurar ambiente de desenvolvimento
	node.js & NPM
	Visual Studio Code
- Entender sobre back-end & front-end
- Criar projeto com Node.js
- Entender sobre React&SPA
- Criar projeto com ReactJS
- Entender sobre React Native & Expo

be the hero: para ajudar ONGs

npm instala os pacotes frameworks e etc..


Arquitetura da aplicação

Back-end
- regras de negócio
- conexão banco de dados
- Envio de e-mail
- Comunicação com webservices
- autenticação do usuario
- criptografia e segurança

api não tem camada visual
restful por seguir padrões

back end comunica como um front end pelo JSON

Front end 

tudo relacionado a visualização

JSON armazena informações principais
vai existir em todos os projetos
armazena independencias


ENTENDENDO O REACT

Abordagem tradicional

navegador => requisição => node.js => respostas (html) => navegador



Na abordagem tradicional, a cada requisição, o servidor retorna o conteudo
completo da pagina, contendo todo HTML e CSS

Essa abordagem limita o front-end para o browser já que o aplicativo mobile
ou serviços externos não vão conseguir interpretar o HTML

Abordagem de SPA (single-page applications)

navegador => requisição => node.js => resposta(JSON) => navegador(html,css,JS)

Na abordagem de SPA, as requisições trazem apenas dados como respostas e, com esses dados,
o front-end pode preeencher as informações em tela.

A página nunca recarrega, otimizando a performance e dando vida ao conceito de SPA. Retornado apenas
JSON podemos ter quantos front-ends quisermos

tem rotas mas é controlada pelo react


npx executa um pacote sem estar instalado na maquina

Entendendo o React Native

Abordagem tradicional

Apple			Android
Objective C		Java
Swift			Kotlin

.ipa			.apk

Na abordagem tradicional, criamos uma aplicação para IOS e outra para android, e nesses casos
o trabalho se torna repetido tanto pta criação quanto para as alterações no projeto

Abordagem do React Native

todo codigo feito é em JS, esse codigo não é convertido em codigo nativo, melhor do que isso,
o dispositivo passa a entender o codigo JS e a interface gerada é totalmente nativa

JS core da o entendimento do JS para o mobile

por que utilizar o Expo?

sem o expo, precisamos instalar em nosso sistema tanto o Android studio para obter a SDK
de desenvolvimento Android, e o Xcode(apenas no mac) para obter a SDK dos IOS

nesse caso, nossa inciação no desenvolvimento fica mais penosam já que nossas SDK'S não são
extremamente simples de instalar e livres de erros

Arquiteturado Expo

envia apenas codigo JS

com o Expo, nós instalamos um aplicativo no celular chamado Expo, e dentro dele, tudo que 
precisamos para desenvolver no React Native já esta instalado, como as API'S de mapas, geolocalização
camera, sensores, calendario, etc..

Com isso, não precisamos nos preocupar em gerar o aplicativopra Android e IOS
já que o app do Expo instalado tem tudo o que precisamos e assim usamos apenas React


aula 02

plano do dia
----------------------------------------------------------------------
Node.js e express
	rotas e recursos
	metodos HTTP
	tipos de parametros
Configurando Nodemon
Utilizando Insomnia
Ddiferenças entre bancos de dados
Configurando banco de dados
Pensando nas entidades e funcionalidades
Construção do back-end
Adicionando Modulo CORDS
Enviando Back-end ao Github-
--------------------------------------------------------------------

codigo code . na pasta do terminal para ir pro vscode.

cad rota da aplicação tem que ter um caminho (/devs por exemplo)

Metódos HTTP:
    GET: Buscar uma informação do back-end (enter no browser pra digitar url)
    POST: Criar uma informação no back-end
    PUT: Alterar uma informação no back-end
    DELETE: Deletar uma informação no back-end

    é um conceito semantico, pois não há muita diferença mas é bom para entendimento do código


navegador so pega método get
utilização do insomnia para criar requisição com qualquer método HTTP

Tipos de parâmetros:
    Query Parms: Parâmetros nomeados enviados na rota após "?" (filtros, paginação) (request.query)
    Route Parms: Parâmetros utilizados utilizados para identificar recursos (/users:id ,onde id sera substituido por numeros id) (request.params)
    Request Body: Corpo da requisição, utilizado para criar ou alterar recursos (request.body)

nodemon utilizado para tornar o desenvolvimento melhor sem precisar ficar reiniciando
servidor todo momento

Banco de dados:
    SQL: MySQL, SQLite, PostgreSQL, Oracle, Microsoft SQL Server
    noSQL : MongoDB, CouchDB, etc

Driver: SELECT * FROM users
    Query Builder: table ('users').select('*') oq sera utilizado

utilização do knex.js para integração com bancod e dados

organização: criar pasat src, para todo codigo criado pelo dev
routes.js para não deixar todas as rotas no index.js

Entidades da aplicação

algo que vai ser salvo na aplicação
entidade ONG
entidade Caso (incident)

Funcionalidades
 
login de ONG
logout de ONG (logout fica para front-end pois não é nada complexo)
cadastro de ONG
cadastrar novos casos 
deletar casos
listar casos especificos de uma ONG
Listar todos os casos
Entrar em contato com a ONG (só no front end será trabalhado)

migrations do knex : controle de versão das tabelas do BD

id principal sera gerado pela aplicação para as ONGs entrarem na aplicação dps
de cadastradas

await é utilizado para esperar o codigo ser realizado para então retornar


controller nãod eve ter mais do que 5 metodos: um para listagem, um metodo para retornar
um unico item (se fosse necessario), criação , alteração e deletar.

por isso a criação de um novo controller

utilizando github

gitignore para não subir o arquivo
node modules não é necessário pois além de pesado, quando for instalado as dependencias do projeto,
node modules vais er instalado 

aula 03 - desenvolvendo frontend web

plano de aula:

-----------------------------------------------------------------------------------------------
-limpando estrutura
-conceitos do react
	-JSX
	-Componente
	-Propriedades
	-Estado
	-Imutabilidade
-página de login
-Configurando rotas
-Cadastro de ONGs
-Listagem de casos
-Cadastro de um novo caso
-Conectando aplicação a API
-Enviar projeto ao Github
--------------------------------------------------------------------------------------------
entendendo o react

react monta a estrutura a partir do javascript

index.html é iniciado, depois o id root é preenchido com o javascript
<div id="root">


jsx(javascript xml) é o html dentro do react (javascript)

propriedades - parecido com atributos do html mas presente nos componentes do react

podemos utilizar componentes dentro de outros
ex Header dentro do componente app

Estado - uma informação que vai ser mantida pelo componente. Ex : input do usuario algod e uma api
não pode-se usar variaveis de maneira normal, mas sim estados
não podemos colocar um elemento embaixo do outro sem estar um uma div
estado permite com toda vez que ele for alterado o componente seja renderizado novamente

imutabilidade o valor do estado nunca pode mudar de forma direta, apenas sobrepor

react router
switch garante que apenas uma rota seja executada por momento
link para deixar com comportamento de SPA

cliente http é responsavel por fazer a chamada com a api e retornar respostas
npm install axios

use effect dispara uma função em um determinado momento do componente

dia 4 - app mobile

não colecione cursos

plano de aula
---------------------------------------------------------------------------------------------------
-Instalando Expo
-Criando projeto React Native
-Executando Projeto
	- no celular
	- emuladores
	- expo snack
-Diferenças para o ReactJS
	- Elementos HTML
	- Semântica
	- Estilização
		- Flexbox
		- Propriedades
		- Herança de estilos
		- Estilização própria
-Estrutura de pastas
-Icone e Splash Screen
-Configurando navegação
-Página de casos
-Detalhe do caso
-Abrindo Whatsapp & E-mail
-Conexão com API
-Enviando projeto ao Github
------------------------------------------------------------------------------------------------------


-expo pode ser utilizando tanto por emulador quando pelo celular via QR code

-expo snack deve ser utilizado apenas em ultima instancia pois limita o desenvolvimento por ter poucas funcionalidades

o react native é diferente do reactjs pois o react native não diferencia igual elementos html (header, footer)
pois não tem semantica


estilização no react native também é diferente
style={objeto com a estilização}
styleSheeet.create({}) para criar os estilos

todos os elementos do react native ja tem display flex por padrão

não existe herança de estilos no react native (não pode passar estilização em um componente acima para os de baixo herdar)

react navigation/native



aula 05 - Funcionalidades avançadas

plano de aula
-----------------------------------------------------------------------------------------------------

-Adicionando validação
-Adicionando testes
	- por que fazer testes?
	- TDD
	- Configurando Jest
	- Tipos de testes
	- Configurando bando de testes
	- Instalando supertest
	- Testando nota de autenticação
-Deploy
	- Alternativas
	- Qual escolher?
-Estudos daqui pra frente
	- Padrões de código: ESLint, Prettier
	- Autenticação JWT
	- Styled Components
- Dicas para aproveitar melhor 
	- Github
	- Linkedin

-----------------------------------------------------------------------------------------------------------------

Biblioteca celebrate para fazer validações no backend

as rotas de criação e alteração (delete) que são colocadas as validações

evitar erros com codigo 500 pois denota que a aplicação não sabe oq fazer com o erro
para isso basta importar errors do celebrate

pq fazer testes? pois existe aplicações gigantes com mais de 20 telas oq torna o teste mais dificil manualmente

TDD - test-driven development: criar o teste antes para depois desenvolver a aplicação. funciona como um guia para o desenvolvedor
pois assim o teste "diz" o que esta faltando no codigo (PESQUISAR SOBRE)

configurando jest - framework de teste que foi utilizado

tipos de testes - testes unitarios e de integrações

integração testa o fluxo de uma rota inteira da aplicação
unitaros apenas uma peça da nossa aplicação de maneira muita isolada, não se conecta com outras conexões

LER sobre variaveis ambiente

biblioteca utilizada por testes integrações : supertest

dica para teste no profile que precisa de authorization request().set('Authorization', 'id de uma ong valida')

Deploy: heroku pq tem plano gratuito bacana
video deploy heroku nodejs

digitalocean para projetos com escalas um pouco maior
video rocketseat 

aws, google cloud e azure são as maiores 

para o deploy do front end

para desenvolvimento e escalas menores: netlify

como gerar apk com expo: video rocketseat

Estudos daqui pra frente
-padrões de codigo - tem no ytb rocketseat
-autenticação jwt- tem post da rocketseat e alguns videoss
- styled components -video tbm

utilize o github e likendin
faça videos mostrando aplicação e tecnologias utilizadas









